[{"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\services\\api.js":"1","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\index.tsx":"2","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\Icons\\Mask.js":"3","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\services\\sendEmail.js":"4","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\App.tsx":"5","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\routes.js":"6","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\pages\\ComicsList\\index.tsx":"7","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalInsertEmail\\index.tsx":"8","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalComicDetails\\index.tsx":"9","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalAlert\\index.tsx":"10"},{"size":135,"mtime":1610986606223,"results":"11","hashOfConfig":"12"},{"size":219,"mtime":1610979821571,"results":"13","hashOfConfig":"12"},{"size":1321,"mtime":1610922840004,"results":"14","hashOfConfig":"12"},{"size":191,"mtime":1610945501958,"results":"15","hashOfConfig":"12"},{"size":687,"mtime":1610991081748,"results":"16","hashOfConfig":"12"},{"size":270,"mtime":1610945476971,"results":"17","hashOfConfig":"12"},{"size":6040,"mtime":1610991063213,"results":"18","hashOfConfig":"12"},{"size":3188,"mtime":1610990465157,"results":"19","hashOfConfig":"12"},{"size":2644,"mtime":1610991028556,"results":"20","hashOfConfig":"12"},{"size":522,"mtime":1610991212483,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1tiklcl",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\services\\api.js",[],["47","48"],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\index.tsx",[],["49","50"],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\Icons\\Mask.js",[],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\services\\sendEmail.js",[],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\App.tsx",[],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\routes.js",[],"C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\pages\\ComicsList\\index.tsx",["51","52"],"import React, { useState, useEffect } from \"react\";\r\nimport api from \"../../services/api\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport ModalComicDetails from \"../../components/ModalComicDetails\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { HiOutlineMail } from \"react-icons/hi\";\r\nimport ModalInsertEmail from \"../../components/ModalInsertEmail\";\r\nimport Mask from \"../../Icons/Mask\";\r\nimport \"./styles.scss\";\r\nimport ModalAlert from \"../../components/ModalAlert\";\r\nimport IComic from \"../../models/comics\";\r\n\r\n\r\ninterface IShowObject {\r\n  class?:string,\r\n  index?:number\r\n}\r\n\r\n\r\nconst  ComicsList: React.FC = () => {\r\n  const [comics, setComics] = useState<IComic[]>([]);\r\n  const [lovedComics, setLovedComics] = useState<IComic[]>([]);\r\n  const [classShowButton, setClassShowButton] = useState<IShowObject | undefined>();\r\n  const [selectedComic, setSelectedComic] = useState<IComic | undefined>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [alertMessage, setAlertMessage] = useState<string>(\"\");\r\n\r\n  const ts = new Date().getTime();\r\n  const publicKey = \"a9c872e621bea639063b886de6f2a77a\";\r\n  const privateKey = CryptoJS.MD5(\r\n    ts + \"4f7fa7d20c0f3a139e6da96d2098a87a8e26647f\" + publicKey\r\n  ).toString();\r\n  const [email, setEmail] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    loadComics();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(lovedComics);\r\n  }, [lovedComics]);\r\n\r\n  const loadComics = async () => {\r\n    setLoading(true);\r\n    await api\r\n      .get(\r\n        `/comics?limit=${99}&offset=${100}&ts=${ts}&apikey=${publicKey}&hash=${privateKey}`\r\n      )\r\n      .then(\r\n        (response) => {\r\n          if (response.data && response.data.data)\r\n            setComics(response.data.data.results);\r\n          else\r\n            setAlertMessage(\r\n              \"Ocorreu um erro com o serviço, por favor tente novamente mais tarde.\"\r\n            );\r\n        },\r\n        (error) => {\r\n          setAlertMessage(\r\n            \"Ocorreu um erro com o serviço, por favor tente novamente mais tarde.\"\r\n          );\r\n        }\r\n      );\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const showComicDetails = (comic: IComic) => {\r\n    comic.image = `${comic?.thumbnail?.path}.${comic?.thumbnail?.extension}`;\r\n    setSelectedComic(comic);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setSelectedComic(undefined);\r\n  };\r\n\r\n  const closeModalEmail = () => {\r\n    setEmail(false);\r\n  };\r\n\r\n  const closeModalAlert = () => {\r\n    setAlertMessage('');\r\n  };\r\n\r\n  const loveComic = (comic: IComic) => {\r\n    const icon = document.getElementById(\"icon-love\" + comic.id);\r\n    const card = document.getElementById(\"card\" + comic.id);\r\n    const comicIsLoved = lovedComics.find((com) => comic.id === com.id);\r\n\r\n    if (!comicIsLoved) {\r\n      setLovedComics([...lovedComics, comic]);\r\n      icon?.classList.add(\"selected\");\r\n      card?.classList.add(\"selected\");\r\n    } else {\r\n      setLovedComics(lovedComics.filter((item) => item.id !== comic.id));\r\n      icon?.classList.remove(\"selected\");\r\n      card?.classList.remove(\"selected\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-list\">\r\n      <ModalComicDetails comicDetails={selectedComic} closeModal={closeModal} />\r\n      {email && (\r\n        <ModalInsertEmail\r\n          sendEmailData={lovedComics}\r\n          closeModal={closeModalEmail}\r\n        />\r\n      )}\r\n      {alertMessage && (\r\n        <ModalAlert message={alertMessage} closeModal={closeModalAlert} />\r\n      )}\r\n      <h1>FAVORITE SUAS HQS</h1>\r\n\r\n      <p>\r\n        {\"Clique no coração dentro da imagem para salvar suas HQs favoritas. Em seguida adicione seu e-mail no ícone abaixo para recebê-las.\".toUpperCase()}{\" \"}\r\n      </p>\r\n      {loading ? (\r\n        <FaSpinner id=\"spinner\" color=\"#FFF\" size={100} />\r\n      ) : (\r\n        <>\r\n          <div className=\"container-cards\">\r\n            {comics &&\r\n              comics.map((comic:IComic, index:number) => (\r\n                <div\r\n                  id={`card${comic.id}`}\r\n                  className=\"card\"\r\n                  key={comic.id}\r\n                  onMouseOver={() => {\r\n                    setClassShowButton({ class: \"mouseOver\", index });\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    setClassShowButton({});\r\n                  }}\r\n                >\r\n                  <div\r\n                    id={`overlay-container-options-card` + comic.id}\r\n                    className={\r\n                      classShowButton?.class && index === classShowButton?.index\r\n                        ? classShowButton?.class\r\n                        : \"hide\"\r\n                    }\r\n                  >\r\n                    <Mask\r\n                      id={`icon-love${comic.id}`}\r\n                      className=\"icon-love\"\r\n                      width=\"70px\"\r\n                      height=\"70px\"\r\n                      onClick={() => loveComic(comic)}\r\n                    />\r\n\r\n                    <button\r\n                      id={`button-see-more${comic.id}`}\r\n                      onClick={() => showComicDetails(comic)}\r\n                    >\r\n                      VER MAIS\r\n                    </button>\r\n                  </div>\r\n                  <span>{comic.title}</span>\r\n                  <img\r\n                    src={`${comic?.thumbnail?.path}.${comic?.thumbnail?.extension}`}\r\n                    alt=\"ilustrative image of comic\"\r\n                  />\r\n                </div>\r\n              ))}\r\n          </div>\r\n          <div className=\"button\">\r\n            <button\r\n              onClick={() => {\r\n                if (lovedComics.length > 0) setEmail(true);\r\n                else\r\n                  setAlertMessage(\r\n                    \"Por favor, marque suas HQs preferidas antes.\"\r\n                  );\r\n              }}\r\n            >\r\n              <HiOutlineMail size={30} />\r\n              Enviar preferidos por e-mail\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ComicsList;\r\n","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalInsertEmail\\index.tsx",["53","54","55"],"import React, { useState, useEffect , InputHTMLAttributes} from \"react\";\r\nimport IComic from '../../models/comics';\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport sendEmail from \"../../services/sendEmail\";\r\nimport \"./styles.scss\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\n\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement>{\r\n  sendEmailData?:IComic[],\r\n  closeModal?:Function | any\r\n}\r\n\r\nconst ModalInsertEmail : React.FC<InputProps> = ({ sendEmailData, closeModal })  => {\r\n  \r\n  const [name, setName] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [alertMessage, setAlertMessage] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const sendEmailContent = async () => {\r\n    setLoading(true);\r\n\r\n    const templateHTML = generateTemplateHTML();\r\n\r\n    const data = {\r\n      name,\r\n      email,\r\n      message: templateHTML,\r\n    };\r\n\r\n    await sendEmail(data).then(\r\n      (response) => {\r\n        console.log(response);\r\n        if (response.status == 200 || response.text == \"OK\")\r\n          setAlertMessage(\"E-mail enviado com sucesso.\");\r\n        else\r\n          setAlertMessage(\r\n            \"Ocorreu um erro, verifique o e-mail digitado e tente novamente mais tarde.\"\r\n          );\r\n        setLoading(false);\r\n      },\r\n      (error) => {\r\n        setAlertMessage(\r\n          \"Ocorreu um erro, verifique o e-mail digitado e tente novamente mais tarde.\"\r\n        );\r\n        setLoading(false);\r\n      }\r\n    );\r\n  };\r\n\r\n  const generateTemplateHTML = () => {\r\n    return sendEmailData?.map(\r\n      (comic:IComic) =>\r\n        `<div>\r\n        <img style=\"height:300px\" src=${comic?.thumbnail?.path}.${\r\n          comic?.thumbnail?.extension\r\n        }>\r\n      \r\n    </div>\r\n    <div>\r\n      <span>${comic.title}</span>\r\n      ${\r\n        comic.creators &&\r\n        comic.creators.items.map(\r\n          (creator) =>\r\n            `<p>\r\n            <span>${creator.name}</span>\r\n            <span>${creator.role}</span>\r\n          </p>`\r\n        )\r\n      }\r\n    </div>\r\n  `\r\n    );\r\n  };\r\n\r\n  const escFunction = (event : any) => {\r\n    if (event.keyCode === 27) {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", escFunction, false);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"container-modal\">\r\n        <AiOutlineClose size={20} onClick={closeModal} />\r\n        <h2> Por favor, digite os campos abaixo: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nome\"\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          onChange={(e) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n        />\r\n        <button onClick={sendEmailContent}>\r\n          {loading ? (\r\n            <FaSpinner id=\"spinner\" color=\"#FFF\" size={18} />\r\n          ) : (\r\n            \"ENVIAR E-MAIL\"\r\n          )}\r\n        </button>\r\n        {alertMessage && <span id=\"alert\">{alertMessage}</span>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalInsertEmail;\r\n","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalComicDetails\\index.tsx",["56","57"],"import React, { useEffect, InputHTMLAttributes } from \"react\";\r\nimport IComic from '../../models/comics';\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport \"./styles.scss\";\r\n\r\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement>{\r\n  comicDetails?:IComic | undefined,\r\n  closeModal?:Function | any,\r\n}\r\n\r\n\r\nconst Modal : React.FC<InputProps> =  ({ comicDetails, closeModal }) => {\r\n  const escFunction = (event : any) => {\r\n    if (event.keyCode === 27) {\r\n      closeModal();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", escFunction, false);\r\n  }, []);\r\n\r\n  return (\r\n    <> \r\n      {comicDetails?.image && (\r\n        <div className=\"overlay\">\r\n          <div className=\"container-modal-details\">\r\n            <div className=\"image-detail\">\r\n              <img\r\n                src={comicDetails?.image}\r\n                alt=\"ilustrative image of choosen comic\"\r\n              />\r\n            </div>\r\n            <div className=\"details\">\r\n              <AiOutlineClose id=\"closeIcon\" size={20} onClick={closeModal} />\r\n              <h2>{comicDetails.title}</h2>\r\n              <h3>Criadores:</h3>\r\n              <p>\r\n                {comicDetails.creators &&\r\n                  comicDetails.creators.items.map(\r\n                    (creator, index) =>\r\n                      index < 15 && (\r\n                        <span key={creator.name}>\r\n                          {creator.name} - {creator.role}\r\n                        </span>\r\n                      )\r\n                  )}\r\n              </p>\r\n              <h3> Custos:</h3>\r\n              <p>\r\n                {comicDetails?.prices &&\r\n                  comicDetails?.prices?.map(\r\n                    (price, index) =>\r\n                      index < 10 && (\r\n                        <span key={index}>\r\n                          {price.type === \"printPrice\"\r\n                            ? \"Preço de impressão\"\r\n                            : price.type === \"digitalPrice\"\r\n                            ? \"Preço de digitalização\"\r\n                            : price.type}{\" \"}\r\n                          -{\" \"}\r\n                          {price?.price?.toLocaleString(\"en-us\", {\r\n                            style: \"currency\",\r\n                            currency: \"USD\",\r\n                          })}\r\n                        </span>\r\n                      )\r\n                  )}\r\n              </p>\r\n              <button id=\"closeButton\" onClick={closeModal}>\r\n                FECHAR\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","C:\\Users\\gustavo.silveira\\Documents\\JavaScript\\Comics\\comics\\src\\components\\ModalAlert\\index.tsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":37,"column":6,"nodeType":"64","endLine":37,"endColumn":8,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":160,"column":19,"nodeType":"68","endLine":163,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":35,"column":29,"nodeType":"71","messageId":"72","endLine":35,"endColumn":31},{"ruleId":"69","severity":1,"message":"70","line":35,"column":53,"nodeType":"71","messageId":"72","endLine":35,"endColumn":55},{"ruleId":"62","severity":1,"message":"73","line":86,"column":6,"nodeType":"64","endLine":86,"endColumn":8,"suggestions":"74"},{"ruleId":"62","severity":1,"message":"73","line":21,"column":6,"nodeType":"64","endLine":21,"endColumn":8,"suggestions":"75"},{"ruleId":"66","severity":1,"message":"67","line":29,"column":15,"nodeType":"68","endLine":32,"endColumn":17},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadComics'. Either include it or remove the dependency array.","ArrayExpression",["78"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'escFunction'. Either include it or remove the dependency array.",["79"],["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"83","fix":"85"},"Update the dependencies array to be: [loadComics]",{"range":"86","text":"87"},"Update the dependencies array to be: [escFunction]",{"range":"88","text":"89"},{"range":"90","text":"89"},[1350,1352],"[loadComics]",[2305,2307],"[escFunction]",[603,605]]